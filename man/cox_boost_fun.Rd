% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cox_boost_fun.R
\name{cox_boost_fun}
\alias{cox_boost_fun}
\title{CoxBoost model}
\usage{
cox_boost_fun(
  r,
  data,
  cvK,
  fitform_ogl,
  formula1,
  formula2,
  formula3,
  formula4,
  time1,
  timess,
  stepnumber,
  penaltynumber
)
}
\arguments{
\item{r}{a numeric value, a seed to run this method}

\item{data}{a dataframe, the data used to performance this survival model}

\item{cvK}{a numeric value, cross-validation fold}

\item{fitform_ogl}{a Surv object from package survival, the survival function}

\item{formula1}{a Surv object from package survival, to caulculate a version of the brier score, details please check package pec}

\item{formula2}{a Surv object from package survival, to caulculate a version of the brier score, details please check package pec}

\item{formula3}{a Surv object from package survival, to caulculate a version of the brier score, details please check package pec}

\item{formula4}{a Surv object from package survival, to caulculate a version of the brier score, details please check package pec}

\item{time1}{a numeric value, the time point to calculate the risk, see package "CoxBoost"}

\item{timess}{a numeric vector of length 15, contains time points to get the time-dependent AUC values}

\item{stepnumber}{a numeric value, the number of stpes performed in the model, see package "CoxBoost"}

\item{penaltynumber}{a numeric value, the penalty number used in the model, see package "CoxBoost"}
}
\value{
a data.frame with allevaluation measurements in all columns and rows are each fold results from cross-validation
}
\description{
CoxBoost model
}
\examples{
data("exampledt", package = "SurvBenchmark")
fitform_ogl=survival::Surv(time,status)~.
formula1=fitform_ogl
formula2=fitform_ogl
formula3=survival::Surv(time,status)~1
formula4=survival::Surv(time,status)~1
form1=as.formula(~.)
timess=seq(as.numeric(summary(cancerdt2_1$time)[2]),as.numeric(summary(cancerdt2_1$time)[5]),(as.numeric(summary(cancerdt2_1$time)[5])-as.numeric(summary(cancerdt2_1$time)[2]))/14)
time1=timess[3]
stepnumber=10
penaltynumber=100
want=cox_boost_fun(1,cancerdt2_1[,-dim(cancerdt2_1)[2]],5,fitform_ogl,formula1,formula2,formula3,formula4,time1,timess,stepnumber,penaltynumber);
}
